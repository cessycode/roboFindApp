{"version":3,"sources":["reducers.js","components/Searchbox.js","components/CardContents.js","components/Card.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Searchbox","searchChange","className","type","placeholder","onChange","CardContents","props","id","name","username","email","alt","src","Card","robotsArray","map","user","i","key","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e13cd3aa.chunk.js","sourcesContent":["// IMPORTANT: Objects returned from this component will be used as STATE in App.js\r\n// mapStateToProps\r\n\r\nimport {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n                            // state and action are assigned initial values\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCHFIELD: \r\n            return {...state, searchField: action.payload}\r\n                //returns a new state that contains the combination of the state plus action.payload\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING: \r\n            return {...state, isPending: true}\r\n        case REQUEST_ROBOTS_SUCCESS: \r\n            return {...state, robots: action.payload, isPending: false}\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error: action.payload, isPending: false}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n    return (\r\n        <div className = 'pa2'>\r\n            <input \r\n                className = 'pa3 ba b--green bg-lightest-blue'\r\n                type = 'search'\r\n                placeholder = 'search robots'\r\n                onChange = {searchChange}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst CardContents = (props) => {\r\n    const {id, name, username, email} = props;\r\n    return (\r\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> \r\n            <img alt = 'robots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{username}</p>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardContents;","import React from 'react';\r\nimport CardContents from './CardContents';\r\n\r\nconst Card = ({robots}) => {\r\n    const robotsArray = robots.map((user, i) => {\r\n        return (\r\n            <CardContents \r\n                id={robots[i].id} \r\n                key = {robots[i].id + i}\r\n                name={robots[i].name} \r\n                username={robots[i].username} \r\n                email={robots[i].email}\r\n            />\r\n        )\r\n    })\r\n    return (\r\n        <div>\r\n            {robotsArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    \r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n    render() {\r\n        return (\r\n            this.state.hasError ? \r\n            <h1>ERROR ENCOUNTERED!!!</h1> :\r\n            this.props.children\r\n        )\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Card from '../components/Card';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './app.css';\r\n\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\n// Creating mapStateToProps and mapDispatchToProps functions for connect() \r\n//-- see export default connect(mapStateToProps, mapDispatchToProps)(App) at the bottom of page\r\n\r\n// THIS IS THE STATE\r\nconst mapStateToProps = state => { \r\n                // state refers to the value passed from index.js\r\n                // as per code line: \r\n                //                <Provider store={store}>  \r\n                //                      <App />\r\n                //                </Provider>\r\n                // where store is from reducers.js\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n        // will be accessed as this.props.searchField \r\n    }\r\n}\r\n\r\n// THIS IS THE ACTION\r\nconst mapDispatchToProps = dispatch => { \r\n            // dispatch is passed on and automatically provided by <Provider>\r\n            // dispatch triggers the action\r\n    return {        \r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)), //from actions.js\r\n             // object will be accessed as this.props.onSearchChange\r\n        \r\n        onRequestRobots: () => dispatch(requestRobots())\r\n            // this will return a function to be executed with redux-thunk\r\n            // this object will be accessed as this.props.onRequestRobots();\r\n    }\r\n}\r\n\r\n\r\nclass App extends Component {\r\n    // read: Lifecycle Hooks\r\n    componentDidMount() {\r\n        this.props.onRequestRobots(); // from mapDispatchToProps\r\n    }\r\n\r\n    render () {\r\n        //Note: DESTRUCTURING used in declaring variables \r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n            // from mapStateToProps\r\n            // same as: \r\n            // const searchField = this.props.searchField\r\n            // const onSearchChange = this.props.onSearchChange\r\n            //const robots = this.state.robots\r\n        \r\n        const filteredRobots = robots.filter(robot => {\r\n            return (\r\n                robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n            )\r\n        })\r\n        return (\r\n            isPending ? <h1>Loading...</h1> :\r\n            (\r\n                <div className = 'tc'>\r\n                    <h1>FindRoboApp</h1>\r\n                    <Searchbox searchChange = {onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <Card robots = {filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n                // connect() - connects the reducers and actions to the App\r\n                // mapStateToProps - subscribe to any state changes in redux store (reducers.js)\r\n                // mapDispatchToProps - listens to any props that are actions (actions.js)\r\n","// IMPORTANT: Objects or Functions from this component will be dispatched in App.js\r\n// mapDispatchToProps\r\n\r\nimport {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n})\r\n\r\n\r\n// THIS IS A HIGHER ORDER FUNCTION - a function that returns another function\r\nexport const requestRobots = () => (dispatch) => { \r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload:data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport {searchRobots, requestRobots} from './reducers'; // becomes state in App.js\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots}); \nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\n                                              // thunkMiddleware - catches a higher order function\n                                              // used for redux async actions\n\nReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>  \n        <App />\n      </Provider> \n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// IMPT: <Provider store = {store}> passes down store as props to App.js down to all other components under it\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}